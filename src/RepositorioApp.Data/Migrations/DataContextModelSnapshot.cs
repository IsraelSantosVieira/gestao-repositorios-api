// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RepositorioApp.Data;

#nullable disable

namespace RepositorioApp.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RepositorioApp.Domain.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Exception")
                        .HasColumnType("varchar")
                        .HasColumnName("exception");

                    b.Property<string>("Level")
                        .HasColumnType("varchar")
                        .HasColumnName("level");

                    b.Property<string>("Logger")
                        .HasColumnType("varchar")
                        .HasColumnName("logger");

                    b.Property<string>("Message")
                        .HasColumnType("varchar")
                        .HasColumnName("message");

                    b.Property<DateTime?>("OccurredAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("occurred_at");

                    b.HasKey("Id");

                    b.ToTable("logs", "public");
                });

            modelBuilder.Entity("RepositorioApp.Domain.Entities.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<string>("Transaction")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("transaction");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("parameter_type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("parameter", "public");
                });

            modelBuilder.Entity("RepositorioApp.Domain.Entities.PasswordRecoverRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresIn")
                        .HasColumnType("timestamp")
                        .HasColumnName("expires_in");

                    b.Property<DateTime?>("UsedIn")
                        .HasColumnType("timestamp")
                        .HasColumnName("used_in");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("password_recover_requests", "public");
                });

            modelBuilder.Entity("RepositorioApp.Domain.Entities.UploadFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<short>("UploadStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("upload_status");

                    b.HasKey("Id");

                    b.ToTable("upload_files", "public");
                });

            modelBuilder.Entity("RepositorioApp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AcceptedTerm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("accepted_term");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Avatar")
                        .HasColumnType("varchar")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(1025)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<bool>("Master")
                        .HasColumnType("boolean")
                        .HasColumnName("master");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(1025)")
                        .HasColumnName("password");

                    b.Property<bool>("PendingRegisterInformation")
                        .HasColumnType("boolean")
                        .HasColumnName("pending_information");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("Email", "Phone")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("RepositorioApp.Jwt.Models.SecurityKey", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("parameters");

                    b.HasKey("Id");

                    b.ToTable("security_keys", "public");
                });

            modelBuilder.Entity("RepositorioApp.Domain.Entities.PasswordRecoverRequest", b =>
                {
                    b.HasOne("RepositorioApp.Domain.Entities.User", null)
                        .WithMany("PasswordRecoverRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RepositorioApp.Domain.Entities.User", b =>
                {
                    b.Navigation("PasswordRecoverRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
